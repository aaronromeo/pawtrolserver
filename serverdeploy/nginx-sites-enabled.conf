upstream pawtrolserver_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/data/tmp/pawtrolserver_gunicorn.sock fail_timeout=0;
}

server {
    listen   80;
    server_name pawtrol.co www.pawtrol.co;

    ## redirect pawtrolapp.com ##
    rewrite        ^ http://pawtrolapp.com$request_uri? redirect;
}

# server {
#     listen   80;
#     server_name pawtrol.co www.pawtrol.co;
# 
#     ## redirect http to https ##
#     rewrite        ^ https://$server_name$request_uri? redirect;
# }

server {

    listen   80;
    server_name docs.pawtrol.co

    client_max_body_size 4G;

    access_log /data/logs/web/pawtrolserver/nginx-access.log;
    error_log /data/logs/web/pawtrolserver/nginx-error.log;

    root /data/venv_pawtrolserver/pawtrolserver/docs/_build/html/;

    location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a 404.
            index index.html index.htm;
            # Uncomment to enable naxsi on this location
            # include /etc/nginx/naxsi.rules
    }
}

server {

    listen   80;
    server_name pawtrolapp.com www.pawtrolapp.com;

    client_max_body_size 4G;

    access_log /data/logs/web/pawtrolserver/nginx-access.log;
    error_log /data/logs/web/pawtrolserver/nginx-error.log;

    # ssl on;
    # ssl_certificate /etc/nginx/conf/ssl-unified.crt;
    # ssl_certificate_key /etc/nginx/conf/ssl.key;

    location /static/ {
        alias   /data/venv_pawtrolserver/pawtrolserver/static/;
    }

    location /media/ {
        alias   /data/venv_pawtrolserver/pawtrolserver/media/;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://pawtrolserver_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /data/venv_pawtrolserver/pawtrolserver/serverdeploy/error_pages/;
    }
}
